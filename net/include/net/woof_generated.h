// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WOOF_CSPOT_H_
#define FLATBUFFERS_GENERATED_WOOF_CSPOT_H_

#include "flatbuffers/flatbuffers.h"

namespace cspot {

struct WoofName;

struct WoofNum;

enum WoofId {
  WoofId_NONE = 0,
  WoofId_WoofName = 1,
  WoofId_WoofNum = 2,
  WoofId_MIN = WoofId_NONE,
  WoofId_MAX = WoofId_WoofNum
};

inline const WoofId (&EnumValuesWoofId())[3] {
  static const WoofId values[] = {
    WoofId_NONE,
    WoofId_WoofName,
    WoofId_WoofNum
  };
  return values;
}

inline const char * const *EnumNamesWoofId() {
  static const char * const names[4] = {
    "NONE",
    "WoofName",
    "WoofNum",
    nullptr
  };
  return names;
}

inline const char *EnumNameWoofId(WoofId e) {
  if (e < WoofId_NONE || e > WoofId_WoofNum) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesWoofId()[index];
}

template<typename T> struct WoofIdTraits {
  static const WoofId enum_value = WoofId_NONE;
};

template<> struct WoofIdTraits<cspot::WoofName> {
  static const WoofId enum_value = WoofId_WoofName;
};

template<> struct WoofIdTraits<cspot::WoofNum> {
  static const WoofId enum_value = WoofId_WoofNum;
};

bool VerifyWoofId(flatbuffers::Verifier &verifier, const void *obj, WoofId type);
bool VerifyWoofIdVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct WoofName FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct WoofNameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(WoofName::VT_NAME, name);
  }
  explicit WoofNameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WoofNameBuilder &operator=(const WoofNameBuilder &);
  flatbuffers::Offset<WoofName> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WoofName>(end);
    return o;
  }
};

inline flatbuffers::Offset<WoofName> CreateWoofName(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  WoofNameBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<WoofName> CreateWoofNameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return cspot::CreateWoofName(
      _fbb,
      name__);
}

struct WoofNum FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUMBER = 4
  };
  int64_t number() const {
    return GetField<int64_t>(VT_NUMBER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_NUMBER) &&
           verifier.EndTable();
  }
};

struct WoofNumBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_number(int64_t number) {
    fbb_.AddElement<int64_t>(WoofNum::VT_NUMBER, number, 0);
  }
  explicit WoofNumBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  WoofNumBuilder &operator=(const WoofNumBuilder &);
  flatbuffers::Offset<WoofNum> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WoofNum>(end);
    return o;
  }
};

inline flatbuffers::Offset<WoofNum> CreateWoofNum(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t number = 0) {
  WoofNumBuilder builder_(_fbb);
  builder_.add_number(number);
  return builder_.Finish();
}

inline bool VerifyWoofId(flatbuffers::Verifier &verifier, const void *obj, WoofId type) {
  switch (type) {
    case WoofId_NONE: {
      return true;
    }
    case WoofId_WoofName: {
      auto ptr = reinterpret_cast<const cspot::WoofName *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case WoofId_WoofNum: {
      auto ptr = reinterpret_cast<const cspot::WoofNum *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyWoofIdVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyWoofId(
        verifier,  values->Get(i), types->GetEnum<WoofId>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace cspot

#endif  // FLATBUFFERS_GENERATED_WOOF_CSPOT_H_
