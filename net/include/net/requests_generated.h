// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUESTS_CSPOT_REQUESTS_H_
#define FLATBUFFERS_GENERATED_REQUESTS_CSPOT_REQUESTS_H_

#include "flatbuffers/flatbuffers.h"

#include "woof_generated.h"

namespace cspot {
namespace requests {

struct Put;

struct Get;

struct GetLastSeqnum;

struct GetElemSize;

struct Put FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WOOF = 4,
    VT_HANDLER = 6,
    VT_DATA = 8
  };
  const flatbuffers::String *woof() const {
    return GetPointer<const flatbuffers::String *>(VT_WOOF);
  }
  const flatbuffers::String *handler() const {
    return GetPointer<const flatbuffers::String *>(VT_HANDLER);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WOOF) &&
           verifier.VerifyString(woof()) &&
           VerifyOffset(verifier, VT_HANDLER) &&
           verifier.VerifyString(handler()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct PutBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_woof(flatbuffers::Offset<flatbuffers::String> woof) {
    fbb_.AddOffset(Put::VT_WOOF, woof);
  }
  void add_handler(flatbuffers::Offset<flatbuffers::String> handler) {
    fbb_.AddOffset(Put::VT_HANDLER, handler);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Put::VT_DATA, data);
  }
  explicit PutBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PutBuilder &operator=(const PutBuilder &);
  flatbuffers::Offset<Put> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Put>(end);
    return o;
  }
};

inline flatbuffers::Offset<Put> CreatePut(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> woof = 0,
    flatbuffers::Offset<flatbuffers::String> handler = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  PutBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_handler(handler);
  builder_.add_woof(woof);
  return builder_.Finish();
}

inline flatbuffers::Offset<Put> CreatePutDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *woof = nullptr,
    const char *handler = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  auto woof__ = woof ? _fbb.CreateString(woof) : 0;
  auto handler__ = handler ? _fbb.CreateString(handler) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return cspot::requests::CreatePut(
      _fbb,
      woof__,
      handler__,
      data__);
}

struct Get FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WOOF = 4,
    VT_SEQ_NUM = 6
  };
  const flatbuffers::String *woof() const {
    return GetPointer<const flatbuffers::String *>(VT_WOOF);
  }
  int64_t seq_num() const {
    return GetField<int64_t>(VT_SEQ_NUM, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WOOF) &&
           verifier.VerifyString(woof()) &&
           VerifyField<int64_t>(verifier, VT_SEQ_NUM) &&
           verifier.EndTable();
  }
};

struct GetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_woof(flatbuffers::Offset<flatbuffers::String> woof) {
    fbb_.AddOffset(Get::VT_WOOF, woof);
  }
  void add_seq_num(int64_t seq_num) {
    fbb_.AddElement<int64_t>(Get::VT_SEQ_NUM, seq_num, 0);
  }
  explicit GetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetBuilder &operator=(const GetBuilder &);
  flatbuffers::Offset<Get> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Get>(end);
    return o;
  }
};

inline flatbuffers::Offset<Get> CreateGet(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> woof = 0,
    int64_t seq_num = 0) {
  GetBuilder builder_(_fbb);
  builder_.add_seq_num(seq_num);
  builder_.add_woof(woof);
  return builder_.Finish();
}

inline flatbuffers::Offset<Get> CreateGetDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *woof = nullptr,
    int64_t seq_num = 0) {
  auto woof__ = woof ? _fbb.CreateString(woof) : 0;
  return cspot::requests::CreateGet(
      _fbb,
      woof__,
      seq_num);
}

struct GetLastSeqnum FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WOOF = 4
  };
  const flatbuffers::String *woof() const {
    return GetPointer<const flatbuffers::String *>(VT_WOOF);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WOOF) &&
           verifier.VerifyString(woof()) &&
           verifier.EndTable();
  }
};

struct GetLastSeqnumBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_woof(flatbuffers::Offset<flatbuffers::String> woof) {
    fbb_.AddOffset(GetLastSeqnum::VT_WOOF, woof);
  }
  explicit GetLastSeqnumBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetLastSeqnumBuilder &operator=(const GetLastSeqnumBuilder &);
  flatbuffers::Offset<GetLastSeqnum> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetLastSeqnum>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetLastSeqnum> CreateGetLastSeqnum(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> woof = 0) {
  GetLastSeqnumBuilder builder_(_fbb);
  builder_.add_woof(woof);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetLastSeqnum> CreateGetLastSeqnumDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *woof = nullptr) {
  auto woof__ = woof ? _fbb.CreateString(woof) : 0;
  return cspot::requests::CreateGetLastSeqnum(
      _fbb,
      woof__);
}

struct GetElemSize FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WOOF = 4
  };
  const flatbuffers::String *woof() const {
    return GetPointer<const flatbuffers::String *>(VT_WOOF);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WOOF) &&
           verifier.VerifyString(woof()) &&
           verifier.EndTable();
  }
};

struct GetElemSizeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_woof(flatbuffers::Offset<flatbuffers::String> woof) {
    fbb_.AddOffset(GetElemSize::VT_WOOF, woof);
  }
  explicit GetElemSizeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetElemSizeBuilder &operator=(const GetElemSizeBuilder &);
  flatbuffers::Offset<GetElemSize> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetElemSize>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetElemSize> CreateGetElemSize(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> woof = 0) {
  GetElemSizeBuilder builder_(_fbb);
  builder_.add_woof(woof);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetElemSize> CreateGetElemSizeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *woof = nullptr) {
  auto woof__ = woof ? _fbb.CreateString(woof) : 0;
  return cspot::requests::CreateGetElemSize(
      _fbb,
      woof__);
}

}  // namespace requests
}  // namespace cspot

#endif  // FLATBUFFERS_GENERATED_REQUESTS_CSPOT_REQUESTS_H_
